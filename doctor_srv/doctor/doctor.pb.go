// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.19.4
// source: doctor.proto

package doctor

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建处方请求
type CreatePrescriptionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoId        string              `protobuf:"bytes,1,opt,name=co_id,json=coId,proto3" json:"co_id,omitempty"`                      // 处方ID
	CoType      string              `protobuf:"bytes,2,opt,name=co_type,json=coType,proto3" json:"co_type,omitempty"`                // 处方类型
	UserId      int64               `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`               // 医生ID
	PatientId   string              `protobuf:"bytes,4,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`       // 患者ID
	PatientName string              `protobuf:"bytes,5,opt,name=patient_name,json=patientName,proto3" json:"patient_name,omitempty"` // 患者姓名
	ChId        string              `protobuf:"bytes,6,opt,name=ch_id,json=chId,proto3" json:"ch_id,omitempty"`                      // 病例ID
	AllAmount   float64             `protobuf:"fixed64,7,opt,name=all_amount,json=allAmount,proto3" json:"all_amount,omitempty"`     // 总金额
	CreateBy    string              `protobuf:"bytes,8,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`          // 创建人
	Items       []*PrescriptionItem `protobuf:"bytes,9,rep,name=items,proto3" json:"items,omitempty"`                                // 处方项目列表
}

func (x *CreatePrescriptionReq) Reset() {
	*x = CreatePrescriptionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePrescriptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePrescriptionReq) ProtoMessage() {}

func (x *CreatePrescriptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePrescriptionReq.ProtoReflect.Descriptor instead.
func (*CreatePrescriptionReq) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePrescriptionReq) GetCoId() string {
	if x != nil {
		return x.CoId
	}
	return ""
}

func (x *CreatePrescriptionReq) GetCoType() string {
	if x != nil {
		return x.CoType
	}
	return ""
}

func (x *CreatePrescriptionReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreatePrescriptionReq) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *CreatePrescriptionReq) GetPatientName() string {
	if x != nil {
		return x.PatientName
	}
	return ""
}

func (x *CreatePrescriptionReq) GetChId() string {
	if x != nil {
		return x.ChId
	}
	return ""
}

func (x *CreatePrescriptionReq) GetAllAmount() float64 {
	if x != nil {
		return x.AllAmount
	}
	return 0
}

func (x *CreatePrescriptionReq) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *CreatePrescriptionReq) GetItems() []*PrescriptionItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// 处方项目
type PrescriptionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId    string  `protobuf:"bytes,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`            // 项目ID
	ItemRefId string  `protobuf:"bytes,2,opt,name=item_ref_id,json=itemRefId,proto3" json:"item_ref_id,omitempty"` // 引用ID
	ItemName  string  `protobuf:"bytes,3,opt,name=item_name,json=itemName,proto3" json:"item_name,omitempty"`      // 项目名称
	ItemType  string  `protobuf:"bytes,4,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"`      // 项目类型
	Num       float64 `protobuf:"fixed64,5,opt,name=num,proto3" json:"num,omitempty"`                              // 数量
	Price     float64 `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`                          // 单价
	Amount    float64 `protobuf:"fixed64,7,opt,name=amount,proto3" json:"amount,omitempty"`                        // 金额
	Remark    string  `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`                          // 备注
	Status    string  `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`                          // 状态
}

func (x *PrescriptionItem) Reset() {
	*x = PrescriptionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrescriptionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrescriptionItem) ProtoMessage() {}

func (x *PrescriptionItem) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrescriptionItem.ProtoReflect.Descriptor instead.
func (*PrescriptionItem) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{1}
}

func (x *PrescriptionItem) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *PrescriptionItem) GetItemRefId() string {
	if x != nil {
		return x.ItemRefId
	}
	return ""
}

func (x *PrescriptionItem) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *PrescriptionItem) GetItemType() string {
	if x != nil {
		return x.ItemType
	}
	return ""
}

func (x *PrescriptionItem) GetNum() float64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *PrescriptionItem) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PrescriptionItem) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PrescriptionItem) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *PrescriptionItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// 创建处方响应
type CreatePrescriptionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	CoId    string `protobuf:"bytes,3,opt,name=co_id,json=coId,proto3" json:"co_id,omitempty"` // 处方ID
}

func (x *CreatePrescriptionResp) Reset() {
	*x = CreatePrescriptionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePrescriptionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePrescriptionResp) ProtoMessage() {}

func (x *CreatePrescriptionResp) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePrescriptionResp.ProtoReflect.Descriptor instead.
func (*CreatePrescriptionResp) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePrescriptionResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreatePrescriptionResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreatePrescriptionResp) GetCoId() string {
	if x != nil {
		return x.CoId
	}
	return ""
}

// 审核处方请求
type ReviewPrescriptionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoId         string `protobuf:"bytes,1,opt,name=co_id,json=coId,proto3" json:"co_id,omitempty"`                         // 处方ID
	ReviewStatus string `protobuf:"bytes,2,opt,name=review_status,json=reviewStatus,proto3" json:"review_status,omitempty"` // 审核状态
	ReviewBy     string `protobuf:"bytes,3,opt,name=review_by,json=reviewBy,proto3" json:"review_by,omitempty"`             // 审核人
	ReviewRemark string `protobuf:"bytes,4,opt,name=review_remark,json=reviewRemark,proto3" json:"review_remark,omitempty"` // 审核备注
}

func (x *ReviewPrescriptionReq) Reset() {
	*x = ReviewPrescriptionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewPrescriptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewPrescriptionReq) ProtoMessage() {}

func (x *ReviewPrescriptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewPrescriptionReq.ProtoReflect.Descriptor instead.
func (*ReviewPrescriptionReq) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{3}
}

func (x *ReviewPrescriptionReq) GetCoId() string {
	if x != nil {
		return x.CoId
	}
	return ""
}

func (x *ReviewPrescriptionReq) GetReviewStatus() string {
	if x != nil {
		return x.ReviewStatus
	}
	return ""
}

func (x *ReviewPrescriptionReq) GetReviewBy() string {
	if x != nil {
		return x.ReviewBy
	}
	return ""
}

func (x *ReviewPrescriptionReq) GetReviewRemark() string {
	if x != nil {
		return x.ReviewRemark
	}
	return ""
}

// 审核处方响应
type ReviewPrescriptionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Success bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ReviewPrescriptionResp) Reset() {
	*x = ReviewPrescriptionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewPrescriptionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewPrescriptionResp) ProtoMessage() {}

func (x *ReviewPrescriptionResp) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewPrescriptionResp.ProtoReflect.Descriptor instead.
func (*ReviewPrescriptionResp) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{4}
}

func (x *ReviewPrescriptionResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ReviewPrescriptionResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReviewPrescriptionResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// 获取处方列表请求
type GetPrescriptionListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize    int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PatientId   string `protobuf:"bytes,3,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`       // 患者ID
	PatientName string `protobuf:"bytes,4,opt,name=patient_name,json=patientName,proto3" json:"patient_name,omitempty"` // 患者姓名
	UserId      int64  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`               // 医生ID
	CoType      string `protobuf:"bytes,6,opt,name=co_type,json=coType,proto3" json:"co_type,omitempty"`                // 处方类型
	Status      string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`                              // 状态
	StartTime   string `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`       // 开始时间
	EndTime     string `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`             // 结束时间
}

func (x *GetPrescriptionListReq) Reset() {
	*x = GetPrescriptionListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrescriptionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrescriptionListReq) ProtoMessage() {}

func (x *GetPrescriptionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrescriptionListReq.ProtoReflect.Descriptor instead.
func (*GetPrescriptionListReq) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{5}
}

func (x *GetPrescriptionListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetPrescriptionListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPrescriptionListReq) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *GetPrescriptionListReq) GetPatientName() string {
	if x != nil {
		return x.PatientName
	}
	return ""
}

func (x *GetPrescriptionListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetPrescriptionListReq) GetCoType() string {
	if x != nil {
		return x.CoType
	}
	return ""
}

func (x *GetPrescriptionListReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetPrescriptionListReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetPrescriptionListReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

// 处方信息
type PrescriptionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoId        string              `protobuf:"bytes,1,opt,name=co_id,json=coId,proto3" json:"co_id,omitempty"`                      // 处方ID
	CoType      string              `protobuf:"bytes,2,opt,name=co_type,json=coType,proto3" json:"co_type,omitempty"`                // 处方类型
	UserId      int64               `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`               // 医生ID
	PatientId   string              `protobuf:"bytes,4,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`       // 患者ID
	PatientName string              `protobuf:"bytes,5,opt,name=patient_name,json=patientName,proto3" json:"patient_name,omitempty"` // 患者姓名
	ChId        string              `protobuf:"bytes,6,opt,name=ch_id,json=chId,proto3" json:"ch_id,omitempty"`                      // 病例ID
	AllAmount   float64             `protobuf:"fixed64,7,opt,name=all_amount,json=allAmount,proto3" json:"all_amount,omitempty"`     // 总金额
	CreateBy    string              `protobuf:"bytes,8,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`          // 创建人
	CreateTime  string              `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`    // 创建时间
	UpdateBy    string              `protobuf:"bytes,10,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`         // 更新人
	UpdateTime  string              `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`   // 更新时间
	Items       []*PrescriptionItem `protobuf:"bytes,12,rep,name=items,proto3" json:"items,omitempty"`                               // 处方项目列表
}

func (x *PrescriptionInfo) Reset() {
	*x = PrescriptionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrescriptionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrescriptionInfo) ProtoMessage() {}

func (x *PrescriptionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrescriptionInfo.ProtoReflect.Descriptor instead.
func (*PrescriptionInfo) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{6}
}

func (x *PrescriptionInfo) GetCoId() string {
	if x != nil {
		return x.CoId
	}
	return ""
}

func (x *PrescriptionInfo) GetCoType() string {
	if x != nil {
		return x.CoType
	}
	return ""
}

func (x *PrescriptionInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PrescriptionInfo) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *PrescriptionInfo) GetPatientName() string {
	if x != nil {
		return x.PatientName
	}
	return ""
}

func (x *PrescriptionInfo) GetChId() string {
	if x != nil {
		return x.ChId
	}
	return ""
}

func (x *PrescriptionInfo) GetAllAmount() float64 {
	if x != nil {
		return x.AllAmount
	}
	return 0
}

func (x *PrescriptionInfo) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *PrescriptionInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *PrescriptionInfo) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *PrescriptionInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *PrescriptionInfo) GetItems() []*PrescriptionItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// 获取处方列表响应
type GetPrescriptionListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	List    []*PrescriptionInfo `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	Total   int64               `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetPrescriptionListResp) Reset() {
	*x = GetPrescriptionListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrescriptionListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrescriptionListResp) ProtoMessage() {}

func (x *GetPrescriptionListResp) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrescriptionListResp.ProtoReflect.Descriptor instead.
func (*GetPrescriptionListResp) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{7}
}

func (x *GetPrescriptionListResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPrescriptionListResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPrescriptionListResp) GetList() []*PrescriptionInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetPrescriptionListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 获取处方详情请求
type GetPrescriptionDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoId string `protobuf:"bytes,1,opt,name=co_id,json=coId,proto3" json:"co_id,omitempty"` // 处方ID
}

func (x *GetPrescriptionDetailReq) Reset() {
	*x = GetPrescriptionDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrescriptionDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrescriptionDetailReq) ProtoMessage() {}

func (x *GetPrescriptionDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrescriptionDetailReq.ProtoReflect.Descriptor instead.
func (*GetPrescriptionDetailReq) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{8}
}

func (x *GetPrescriptionDetailReq) GetCoId() string {
	if x != nil {
		return x.CoId
	}
	return ""
}

// 获取处方详情响应
type GetPrescriptionDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Detail  *PrescriptionInfo `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	Qrcode  string            `protobuf:"bytes,4,opt,name=qrcode,proto3" json:"qrcode,omitempty"` // 新增
}

func (x *GetPrescriptionDetailResp) Reset() {
	*x = GetPrescriptionDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrescriptionDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrescriptionDetailResp) ProtoMessage() {}

func (x *GetPrescriptionDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrescriptionDetailResp.ProtoReflect.Descriptor instead.
func (*GetPrescriptionDetailResp) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{9}
}

func (x *GetPrescriptionDetailResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPrescriptionDetailResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPrescriptionDetailResp) GetDetail() *PrescriptionInfo {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *GetPrescriptionDetailResp) GetQrcode() string {
	if x != nil {
		return x.Qrcode
	}
	return ""
}

// 选择药品请求
type SelectMedicinesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicinesId      string  `protobuf:"bytes,1,opt,name=medicines_id,json=medicinesId,proto3" json:"medicines_id,omitempty"`                // 药品ID
	MedicinesName    string  `protobuf:"bytes,2,opt,name=medicines_name,json=medicinesName,proto3" json:"medicines_name,omitempty"`          // 药品名称
	MedicinesType    string  `protobuf:"bytes,3,opt,name=medicines_type,json=medicinesType,proto3" json:"medicines_type,omitempty"`          // 药品类型
	PrescriptionType string  `protobuf:"bytes,4,opt,name=prescription_type,json=prescriptionType,proto3" json:"prescription_type,omitempty"` // 处方类型
	Num              float64 `protobuf:"fixed64,5,opt,name=num,proto3" json:"num,omitempty"`                                                 // 数量
	Unit             string  `protobuf:"bytes,6,opt,name=unit,proto3" json:"unit,omitempty"`                                                 // 单位
}

func (x *SelectMedicinesReq) Reset() {
	*x = SelectMedicinesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectMedicinesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectMedicinesReq) ProtoMessage() {}

func (x *SelectMedicinesReq) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectMedicinesReq.ProtoReflect.Descriptor instead.
func (*SelectMedicinesReq) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{10}
}

func (x *SelectMedicinesReq) GetMedicinesId() string {
	if x != nil {
		return x.MedicinesId
	}
	return ""
}

func (x *SelectMedicinesReq) GetMedicinesName() string {
	if x != nil {
		return x.MedicinesName
	}
	return ""
}

func (x *SelectMedicinesReq) GetMedicinesType() string {
	if x != nil {
		return x.MedicinesType
	}
	return ""
}

func (x *SelectMedicinesReq) GetPrescriptionType() string {
	if x != nil {
		return x.PrescriptionType
	}
	return ""
}

func (x *SelectMedicinesReq) GetNum() float64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *SelectMedicinesReq) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

// 选择药品响应
type SelectMedicinesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int64          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Medicines *MedicinesInfo `protobuf:"bytes,3,opt,name=medicines,proto3" json:"medicines,omitempty"`
}

func (x *SelectMedicinesResp) Reset() {
	*x = SelectMedicinesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectMedicinesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectMedicinesResp) ProtoMessage() {}

func (x *SelectMedicinesResp) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectMedicinesResp.ProtoReflect.Descriptor instead.
func (*SelectMedicinesResp) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{11}
}

func (x *SelectMedicinesResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SelectMedicinesResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SelectMedicinesResp) GetMedicines() *MedicinesInfo {
	if x != nil {
		return x.Medicines
	}
	return nil
}

// 药品信息
type MedicinesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicinesId             uint64  `protobuf:"varint,1,opt,name=medicines_id,json=medicinesId,proto3" json:"medicines_id,omitempty"`                                           // 药品ID
	MedicinesNumber         string  `protobuf:"bytes,2,opt,name=medicines_number,json=medicinesNumber,proto3" json:"medicines_number,omitempty"`                                // 药品编号
	MedicinesName           string  `protobuf:"bytes,3,opt,name=medicines_name,json=medicinesName,proto3" json:"medicines_name,omitempty"`                                      // 药品名称
	MedicinesType           string  `protobuf:"bytes,4,opt,name=medicines_type,json=medicinesType,proto3" json:"medicines_type,omitempty"`                                      // 药品类型
	PrescriptionType        string  `protobuf:"bytes,5,opt,name=prescription_type,json=prescriptionType,proto3" json:"prescription_type,omitempty"`                             // 处方类型
	PrescriptionPrice       float64 `protobuf:"fixed64,6,opt,name=prescription_price,json=prescriptionPrice,proto3" json:"prescription_price,omitempty"`                        // 处方价格
	Unit                    string  `protobuf:"bytes,7,opt,name=unit,proto3" json:"unit,omitempty"`                                                                             // 单位
	Conversion              int32   `protobuf:"varint,8,opt,name=conversion,proto3" json:"conversion,omitempty"`                                                                // 换算
	Keywords                string  `protobuf:"bytes,9,opt,name=keywords,proto3" json:"keywords,omitempty"`                                                                     // 关键词
	ProducterId             string  `protobuf:"bytes,10,opt,name=producter_id,json=producterId,proto3" json:"producter_id,omitempty"`                                           // 生产厂家ID
	Status                  string  `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`                                                                        // 状态
	MedicinesStockNum       float64 `protobuf:"fixed64,12,opt,name=medicines_stock_num,json=medicinesStockNum,proto3" json:"medicines_stock_num,omitempty"`                     // 库存数量
	MedicinesStockDangerNum float64 `protobuf:"fixed64,13,opt,name=medicines_stock_danger_num,json=medicinesStockDangerNum,proto3" json:"medicines_stock_danger_num,omitempty"` // 危险库存数量
	CreateTime              string  `protobuf:"bytes,14,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                              // 创建时间
	UpdateTime              string  `protobuf:"bytes,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                              // 更新时间
	CreateBy                string  `protobuf:"bytes,16,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                                                    // 创建人
	UpdateBy                string  `protobuf:"bytes,17,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                                                    // 更新人
	DelFlag                 string  `protobuf:"bytes,18,opt,name=del_flag,json=delFlag,proto3" json:"del_flag,omitempty"`                                                       // 删除标志
}

func (x *MedicinesInfo) Reset() {
	*x = MedicinesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinesInfo) ProtoMessage() {}

func (x *MedicinesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinesInfo.ProtoReflect.Descriptor instead.
func (*MedicinesInfo) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{12}
}

func (x *MedicinesInfo) GetMedicinesId() uint64 {
	if x != nil {
		return x.MedicinesId
	}
	return 0
}

func (x *MedicinesInfo) GetMedicinesNumber() string {
	if x != nil {
		return x.MedicinesNumber
	}
	return ""
}

func (x *MedicinesInfo) GetMedicinesName() string {
	if x != nil {
		return x.MedicinesName
	}
	return ""
}

func (x *MedicinesInfo) GetMedicinesType() string {
	if x != nil {
		return x.MedicinesType
	}
	return ""
}

func (x *MedicinesInfo) GetPrescriptionType() string {
	if x != nil {
		return x.PrescriptionType
	}
	return ""
}

func (x *MedicinesInfo) GetPrescriptionPrice() float64 {
	if x != nil {
		return x.PrescriptionPrice
	}
	return 0
}

func (x *MedicinesInfo) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *MedicinesInfo) GetConversion() int32 {
	if x != nil {
		return x.Conversion
	}
	return 0
}

func (x *MedicinesInfo) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *MedicinesInfo) GetProducterId() string {
	if x != nil {
		return x.ProducterId
	}
	return ""
}

func (x *MedicinesInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MedicinesInfo) GetMedicinesStockNum() float64 {
	if x != nil {
		return x.MedicinesStockNum
	}
	return 0
}

func (x *MedicinesInfo) GetMedicinesStockDangerNum() float64 {
	if x != nil {
		return x.MedicinesStockDangerNum
	}
	return 0
}

func (x *MedicinesInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *MedicinesInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *MedicinesInfo) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *MedicinesInfo) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *MedicinesInfo) GetDelFlag() string {
	if x != nil {
		return x.DelFlag
	}
	return ""
}

// 获取药品列表请求
type GetMedicinesListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page             int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize         int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	MedicinesName    string `protobuf:"bytes,3,opt,name=medicines_name,json=medicinesName,proto3" json:"medicines_name,omitempty"`          // 药品名称
	MedicinesType    string `protobuf:"bytes,4,opt,name=medicines_type,json=medicinesType,proto3" json:"medicines_type,omitempty"`          // 药品类型
	PrescriptionType string `protobuf:"bytes,5,opt,name=prescription_type,json=prescriptionType,proto3" json:"prescription_type,omitempty"` // 处方类型
	Status           string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`                                             // 状态
	Keywords         string `protobuf:"bytes,7,opt,name=keywords,proto3" json:"keywords,omitempty"`                                         // 关键词
}

func (x *GetMedicinesListReq) Reset() {
	*x = GetMedicinesListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMedicinesListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedicinesListReq) ProtoMessage() {}

func (x *GetMedicinesListReq) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedicinesListReq.ProtoReflect.Descriptor instead.
func (*GetMedicinesListReq) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{13}
}

func (x *GetMedicinesListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetMedicinesListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetMedicinesListReq) GetMedicinesName() string {
	if x != nil {
		return x.MedicinesName
	}
	return ""
}

func (x *GetMedicinesListReq) GetMedicinesType() string {
	if x != nil {
		return x.MedicinesType
	}
	return ""
}

func (x *GetMedicinesListReq) GetPrescriptionType() string {
	if x != nil {
		return x.PrescriptionType
	}
	return ""
}

func (x *GetMedicinesListReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetMedicinesListReq) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

// 获取药品列表响应
type GetMedicinesListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	List    []*MedicinesInfo `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	Total   int64            `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetMedicinesListResp) Reset() {
	*x = GetMedicinesListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMedicinesListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedicinesListResp) ProtoMessage() {}

func (x *GetMedicinesListResp) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedicinesListResp.ProtoReflect.Descriptor instead.
func (*GetMedicinesListResp) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{14}
}

func (x *GetMedicinesListResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetMedicinesListResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetMedicinesListResp) GetList() []*MedicinesInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetMedicinesListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 获取药品详情请求
type GetMedicinesDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicinesId uint64 `protobuf:"varint,1,opt,name=medicines_id,json=medicinesId,proto3" json:"medicines_id,omitempty"` // 药品ID
}

func (x *GetMedicinesDetailReq) Reset() {
	*x = GetMedicinesDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMedicinesDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedicinesDetailReq) ProtoMessage() {}

func (x *GetMedicinesDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedicinesDetailReq.ProtoReflect.Descriptor instead.
func (*GetMedicinesDetailReq) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{15}
}

func (x *GetMedicinesDetailReq) GetMedicinesId() uint64 {
	if x != nil {
		return x.MedicinesId
	}
	return 0
}

// 获取药品详情响应
type GetMedicinesDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Detail  *MedicinesInfo `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *GetMedicinesDetailResp) Reset() {
	*x = GetMedicinesDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMedicinesDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedicinesDetailResp) ProtoMessage() {}

func (x *GetMedicinesDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedicinesDetailResp.ProtoReflect.Descriptor instead.
func (*GetMedicinesDetailResp) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{16}
}

func (x *GetMedicinesDetailResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetMedicinesDetailResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetMedicinesDetailResp) GetDetail() *MedicinesInfo {
	if x != nil {
		return x.Detail
	}
	return nil
}

// 创建病例请求
type CreateCareHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChId         string `protobuf:"bytes,1,opt,name=ch_id,json=chId,proto3" json:"ch_id,omitempty"`                         // 病例ID
	UserId       int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // 医生ID
	UserName     string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`             // 医生姓名
	PatientId    string `protobuf:"bytes,4,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`          // 患者ID
	PatientName  string `protobuf:"bytes,5,opt,name=patient_name,json=patientName,proto3" json:"patient_name,omitempty"`    // 患者姓名
	DeptId       int64  `protobuf:"varint,6,opt,name=dept_id,json=deptId,proto3" json:"dept_id,omitempty"`                  // 科室ID
	DeptName     string `protobuf:"bytes,7,opt,name=dept_name,json=deptName,proto3" json:"dept_name,omitempty"`             // 科室名称
	ReceiveType  string `protobuf:"bytes,8,opt,name=receive_type,json=receiveType,proto3" json:"receive_type,omitempty"`    // 接诊类型
	IsContagious string `protobuf:"bytes,9,opt,name=is_contagious,json=isContagious,proto3" json:"is_contagious,omitempty"` // 是否传染病
	CaseDate     string `protobuf:"bytes,10,opt,name=case_date,json=caseDate,proto3" json:"case_date,omitempty"`            // 病例日期
	RegId        string `protobuf:"bytes,11,opt,name=reg_id,json=regId,proto3" json:"reg_id,omitempty"`                     // 挂号ID
	CaseTitle    string `protobuf:"bytes,12,opt,name=case_title,json=caseTitle,proto3" json:"case_title,omitempty"`         // 病例标题
	CaseResult   string `protobuf:"bytes,13,opt,name=case_result,json=caseResult,proto3" json:"case_result,omitempty"`      // 病例结果
	DoctorTips   string `protobuf:"bytes,14,opt,name=doctor_tips,json=doctorTips,proto3" json:"doctor_tips,omitempty"`      // 医生建议
	Remark       string `protobuf:"bytes,15,opt,name=remark,proto3" json:"remark,omitempty"`                                // 备注
}

func (x *CreateCareHistoryReq) Reset() {
	*x = CreateCareHistoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCareHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCareHistoryReq) ProtoMessage() {}

func (x *CreateCareHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCareHistoryReq.ProtoReflect.Descriptor instead.
func (*CreateCareHistoryReq) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{17}
}

func (x *CreateCareHistoryReq) GetChId() string {
	if x != nil {
		return x.ChId
	}
	return ""
}

func (x *CreateCareHistoryReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateCareHistoryReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CreateCareHistoryReq) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *CreateCareHistoryReq) GetPatientName() string {
	if x != nil {
		return x.PatientName
	}
	return ""
}

func (x *CreateCareHistoryReq) GetDeptId() int64 {
	if x != nil {
		return x.DeptId
	}
	return 0
}

func (x *CreateCareHistoryReq) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *CreateCareHistoryReq) GetReceiveType() string {
	if x != nil {
		return x.ReceiveType
	}
	return ""
}

func (x *CreateCareHistoryReq) GetIsContagious() string {
	if x != nil {
		return x.IsContagious
	}
	return ""
}

func (x *CreateCareHistoryReq) GetCaseDate() string {
	if x != nil {
		return x.CaseDate
	}
	return ""
}

func (x *CreateCareHistoryReq) GetRegId() string {
	if x != nil {
		return x.RegId
	}
	return ""
}

func (x *CreateCareHistoryReq) GetCaseTitle() string {
	if x != nil {
		return x.CaseTitle
	}
	return ""
}

func (x *CreateCareHistoryReq) GetCaseResult() string {
	if x != nil {
		return x.CaseResult
	}
	return ""
}

func (x *CreateCareHistoryReq) GetDoctorTips() string {
	if x != nil {
		return x.DoctorTips
	}
	return ""
}

func (x *CreateCareHistoryReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 创建病例响应
type CreateCareHistoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ChId    string `protobuf:"bytes,3,opt,name=ch_id,json=chId,proto3" json:"ch_id,omitempty"` // 病例ID
}

func (x *CreateCareHistoryResp) Reset() {
	*x = CreateCareHistoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCareHistoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCareHistoryResp) ProtoMessage() {}

func (x *CreateCareHistoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCareHistoryResp.ProtoReflect.Descriptor instead.
func (*CreateCareHistoryResp) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{18}
}

func (x *CreateCareHistoryResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateCareHistoryResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateCareHistoryResp) GetChId() string {
	if x != nil {
		return x.ChId
	}
	return ""
}

// 获取病例列表请求
type GetCareHistoryListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize    int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PatientId   string `protobuf:"bytes,3,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`       // 患者ID
	PatientName string `protobuf:"bytes,4,opt,name=patient_name,json=patientName,proto3" json:"patient_name,omitempty"` // 患者姓名
	UserId      int64  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`               // 医生ID
	DeptId      string `protobuf:"bytes,6,opt,name=dept_id,json=deptId,proto3" json:"dept_id,omitempty"`                // 科室ID
	CaseDate    string `protobuf:"bytes,7,opt,name=case_date,json=caseDate,proto3" json:"case_date,omitempty"`          // 病例日期
	StartTime   string `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`       // 开始时间
	EndTime     string `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`             // 结束时间
}

func (x *GetCareHistoryListReq) Reset() {
	*x = GetCareHistoryListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCareHistoryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCareHistoryListReq) ProtoMessage() {}

func (x *GetCareHistoryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCareHistoryListReq.ProtoReflect.Descriptor instead.
func (*GetCareHistoryListReq) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{19}
}

func (x *GetCareHistoryListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetCareHistoryListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCareHistoryListReq) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *GetCareHistoryListReq) GetPatientName() string {
	if x != nil {
		return x.PatientName
	}
	return ""
}

func (x *GetCareHistoryListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetCareHistoryListReq) GetDeptId() string {
	if x != nil {
		return x.DeptId
	}
	return ""
}

func (x *GetCareHistoryListReq) GetCaseDate() string {
	if x != nil {
		return x.CaseDate
	}
	return ""
}

func (x *GetCareHistoryListReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetCareHistoryListReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

// 病例信息
type CareHistoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChId         string `protobuf:"bytes,1,opt,name=ch_id,json=chId,proto3" json:"ch_id,omitempty"`                         // 病例ID
	UserId       int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // 医生ID
	UserName     string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`             // 医生姓名
	PatientId    string `protobuf:"bytes,4,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`          // 患者ID
	PatientName  string `protobuf:"bytes,5,opt,name=patient_name,json=patientName,proto3" json:"patient_name,omitempty"`    // 患者姓名
	DeptId       int64  `protobuf:"varint,6,opt,name=dept_id,json=deptId,proto3" json:"dept_id,omitempty"`                  // 科室ID
	DeptName     string `protobuf:"bytes,7,opt,name=dept_name,json=deptName,proto3" json:"dept_name,omitempty"`             // 科室名称
	ReceiveType  string `protobuf:"bytes,8,opt,name=receive_type,json=receiveType,proto3" json:"receive_type,omitempty"`    // 接诊类型
	IsContagious string `protobuf:"bytes,9,opt,name=is_contagious,json=isContagious,proto3" json:"is_contagious,omitempty"` // 是否传染病
	CareTime     string `protobuf:"bytes,10,opt,name=care_time,json=careTime,proto3" json:"care_time,omitempty"`            // 就诊时间
	CaseDate     string `protobuf:"bytes,11,opt,name=case_date,json=caseDate,proto3" json:"case_date,omitempty"`            // 病例日期
	RegId        string `protobuf:"bytes,12,opt,name=reg_id,json=regId,proto3" json:"reg_id,omitempty"`                     // 挂号ID
	CaseTitle    string `protobuf:"bytes,13,opt,name=case_title,json=caseTitle,proto3" json:"case_title,omitempty"`         // 病例标题
	CaseResult   string `protobuf:"bytes,14,opt,name=case_result,json=caseResult,proto3" json:"case_result,omitempty"`      // 病例结果
	DoctorTips   string `protobuf:"bytes,15,opt,name=doctor_tips,json=doctorTips,proto3" json:"doctor_tips,omitempty"`      // 医生建议
	Remark       string `protobuf:"bytes,16,opt,name=remark,proto3" json:"remark,omitempty"`                                // 备注
}

func (x *CareHistoryInfo) Reset() {
	*x = CareHistoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CareHistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CareHistoryInfo) ProtoMessage() {}

func (x *CareHistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CareHistoryInfo.ProtoReflect.Descriptor instead.
func (*CareHistoryInfo) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{20}
}

func (x *CareHistoryInfo) GetChId() string {
	if x != nil {
		return x.ChId
	}
	return ""
}

func (x *CareHistoryInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CareHistoryInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CareHistoryInfo) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *CareHistoryInfo) GetPatientName() string {
	if x != nil {
		return x.PatientName
	}
	return ""
}

func (x *CareHistoryInfo) GetDeptId() int64 {
	if x != nil {
		return x.DeptId
	}
	return 0
}

func (x *CareHistoryInfo) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *CareHistoryInfo) GetReceiveType() string {
	if x != nil {
		return x.ReceiveType
	}
	return ""
}

func (x *CareHistoryInfo) GetIsContagious() string {
	if x != nil {
		return x.IsContagious
	}
	return ""
}

func (x *CareHistoryInfo) GetCareTime() string {
	if x != nil {
		return x.CareTime
	}
	return ""
}

func (x *CareHistoryInfo) GetCaseDate() string {
	if x != nil {
		return x.CaseDate
	}
	return ""
}

func (x *CareHistoryInfo) GetRegId() string {
	if x != nil {
		return x.RegId
	}
	return ""
}

func (x *CareHistoryInfo) GetCaseTitle() string {
	if x != nil {
		return x.CaseTitle
	}
	return ""
}

func (x *CareHistoryInfo) GetCaseResult() string {
	if x != nil {
		return x.CaseResult
	}
	return ""
}

func (x *CareHistoryInfo) GetDoctorTips() string {
	if x != nil {
		return x.DoctorTips
	}
	return ""
}

func (x *CareHistoryInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 获取病例列表响应
type GetCareHistoryListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	List    []*CareHistoryInfo `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	Total   int64              `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetCareHistoryListResp) Reset() {
	*x = GetCareHistoryListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCareHistoryListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCareHistoryListResp) ProtoMessage() {}

func (x *GetCareHistoryListResp) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCareHistoryListResp.ProtoReflect.Descriptor instead.
func (*GetCareHistoryListResp) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{21}
}

func (x *GetCareHistoryListResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCareHistoryListResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCareHistoryListResp) GetList() []*CareHistoryInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetCareHistoryListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 获取病例详情请求
type GetCareHistoryDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChId string `protobuf:"bytes,1,opt,name=ch_id,json=chId,proto3" json:"ch_id,omitempty"` // 病例ID
}

func (x *GetCareHistoryDetailReq) Reset() {
	*x = GetCareHistoryDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCareHistoryDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCareHistoryDetailReq) ProtoMessage() {}

func (x *GetCareHistoryDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCareHistoryDetailReq.ProtoReflect.Descriptor instead.
func (*GetCareHistoryDetailReq) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{22}
}

func (x *GetCareHistoryDetailReq) GetChId() string {
	if x != nil {
		return x.ChId
	}
	return ""
}

// 获取病例详情响应
type GetCareHistoryDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Detail  *CareHistoryInfo `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *GetCareHistoryDetailResp) Reset() {
	*x = GetCareHistoryDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCareHistoryDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCareHistoryDetailResp) ProtoMessage() {}

func (x *GetCareHistoryDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCareHistoryDetailResp.ProtoReflect.Descriptor instead.
func (*GetCareHistoryDetailResp) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{23}
}

func (x *GetCareHistoryDetailResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCareHistoryDetailResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCareHistoryDetailResp) GetDetail() *CareHistoryInfo {
	if x != nil {
		return x.Detail
	}
	return nil
}

// 获取周排行榜请求
type GetWeeklyRankingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"` // 获取前N名，默认10
}

func (x *GetWeeklyRankingReq) Reset() {
	*x = GetWeeklyRankingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWeeklyRankingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWeeklyRankingReq) ProtoMessage() {}

func (x *GetWeeklyRankingReq) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWeeklyRankingReq.ProtoReflect.Descriptor instead.
func (*GetWeeklyRankingReq) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{24}
}

func (x *GetWeeklyRankingReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// 排行榜信息
type RankingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank              int64   `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`                                                    // 排名
	DoctorId          int64   `protobuf:"varint,2,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id,omitempty"`                            // 医生ID
	DoctorName        string  `protobuf:"bytes,3,opt,name=doctor_name,json=doctorName,proto3" json:"doctor_name,omitempty"`                       // 医生姓名
	DeptName          string  `protobuf:"bytes,4,opt,name=dept_name,json=deptName,proto3" json:"dept_name,omitempty"`                             // 科室名称
	TotalPerformance  float64 `protobuf:"fixed64,5,opt,name=total_performance,json=totalPerformance,proto3" json:"total_performance,omitempty"`   // 总业绩
	PrescriptionCount int64   `protobuf:"varint,6,opt,name=prescription_count,json=prescriptionCount,proto3" json:"prescription_count,omitempty"` // 处方数量
}

func (x *RankingInfo) Reset() {
	*x = RankingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankingInfo) ProtoMessage() {}

func (x *RankingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankingInfo.ProtoReflect.Descriptor instead.
func (*RankingInfo) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{25}
}

func (x *RankingInfo) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RankingInfo) GetDoctorId() int64 {
	if x != nil {
		return x.DoctorId
	}
	return 0
}

func (x *RankingInfo) GetDoctorName() string {
	if x != nil {
		return x.DoctorName
	}
	return ""
}

func (x *RankingInfo) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *RankingInfo) GetTotalPerformance() float64 {
	if x != nil {
		return x.TotalPerformance
	}
	return 0
}

func (x *RankingInfo) GetPrescriptionCount() int64 {
	if x != nil {
		return x.PrescriptionCount
	}
	return 0
}

// 获取周排行榜响应
type GetWeeklyRankingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int64          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Rankings  []*RankingInfo `protobuf:"bytes,3,rep,name=rankings,proto3" json:"rankings,omitempty"`                    // 排行榜列表
	WeekStart string         `protobuf:"bytes,4,opt,name=week_start,json=weekStart,proto3" json:"week_start,omitempty"` // 周开始日期
	WeekEnd   string         `protobuf:"bytes,5,opt,name=week_end,json=weekEnd,proto3" json:"week_end,omitempty"`       // 周结束日期
}

func (x *GetWeeklyRankingResp) Reset() {
	*x = GetWeeklyRankingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWeeklyRankingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWeeklyRankingResp) ProtoMessage() {}

func (x *GetWeeklyRankingResp) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWeeklyRankingResp.ProtoReflect.Descriptor instead.
func (*GetWeeklyRankingResp) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{26}
}

func (x *GetWeeklyRankingResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetWeeklyRankingResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetWeeklyRankingResp) GetRankings() []*RankingInfo {
	if x != nil {
		return x.Rankings
	}
	return nil
}

func (x *GetWeeklyRankingResp) GetWeekStart() string {
	if x != nil {
		return x.WeekStart
	}
	return ""
}

func (x *GetWeeklyRankingResp) GetWeekEnd() string {
	if x != nil {
		return x.WeekEnd
	}
	return ""
}

// 生成周排行榜请求
type GenerateWeeklyRankingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GenerateWeeklyRankingReq) Reset() {
	*x = GenerateWeeklyRankingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateWeeklyRankingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateWeeklyRankingReq) ProtoMessage() {}

func (x *GenerateWeeklyRankingReq) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateWeeklyRankingReq.ProtoReflect.Descriptor instead.
func (*GenerateWeeklyRankingReq) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{27}
}

// 生成周排行榜响应
type GenerateWeeklyRankingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message     string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Success     bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`                            // 是否成功
	DoctorCount int64  `protobuf:"varint,4,opt,name=doctor_count,json=doctorCount,proto3" json:"doctor_count,omitempty"` // 生成的医生数量
}

func (x *GenerateWeeklyRankingResp) Reset() {
	*x = GenerateWeeklyRankingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateWeeklyRankingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateWeeklyRankingResp) ProtoMessage() {}

func (x *GenerateWeeklyRankingResp) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateWeeklyRankingResp.ProtoReflect.Descriptor instead.
func (*GenerateWeeklyRankingResp) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{28}
}

func (x *GenerateWeeklyRankingResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GenerateWeeklyRankingResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GenerateWeeklyRankingResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GenerateWeeklyRankingResp) GetDoctorCount() int64 {
	if x != nil {
		return x.DoctorCount
	}
	return 0
}

// 获取医生业绩请求
type GetDoctorPerformanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoctorId  int64  `protobuf:"varint,1,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id,omitempty"`   // 医生ID
	StartDate string `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"` // 开始日期
	EndDate   string `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`       // 结束日期
}

func (x *GetDoctorPerformanceReq) Reset() {
	*x = GetDoctorPerformanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDoctorPerformanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDoctorPerformanceReq) ProtoMessage() {}

func (x *GetDoctorPerformanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDoctorPerformanceReq.ProtoReflect.Descriptor instead.
func (*GetDoctorPerformanceReq) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{29}
}

func (x *GetDoctorPerformanceReq) GetDoctorId() int64 {
	if x != nil {
		return x.DoctorId
	}
	return 0
}

func (x *GetDoctorPerformanceReq) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetDoctorPerformanceReq) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

// 业绩明细信息
type PerformanceDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerformanceId     string  `protobuf:"bytes,1,opt,name=performance_id,json=performanceId,proto3" json:"performance_id,omitempty"`               // 业绩ID
	CoId              string  `protobuf:"bytes,2,opt,name=co_id,json=coId,proto3" json:"co_id,omitempty"`                                          // 处方ID
	PaymentAmount     float64 `protobuf:"fixed64,3,opt,name=payment_amount,json=paymentAmount,proto3" json:"payment_amount,omitempty"`             // 缴费金额
	PerformanceAmount float64 `protobuf:"fixed64,4,opt,name=performance_amount,json=performanceAmount,proto3" json:"performance_amount,omitempty"` // 业绩金额
	PerformanceRate   float64 `protobuf:"fixed64,5,opt,name=performance_rate,json=performanceRate,proto3" json:"performance_rate,omitempty"`       // 业绩比例
	PerformanceDate   string  `protobuf:"bytes,6,opt,name=performance_date,json=performanceDate,proto3" json:"performance_date,omitempty"`         // 业绩日期
}

func (x *PerformanceDetail) Reset() {
	*x = PerformanceDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceDetail) ProtoMessage() {}

func (x *PerformanceDetail) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceDetail.ProtoReflect.Descriptor instead.
func (*PerformanceDetail) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{30}
}

func (x *PerformanceDetail) GetPerformanceId() string {
	if x != nil {
		return x.PerformanceId
	}
	return ""
}

func (x *PerformanceDetail) GetCoId() string {
	if x != nil {
		return x.CoId
	}
	return ""
}

func (x *PerformanceDetail) GetPaymentAmount() float64 {
	if x != nil {
		return x.PaymentAmount
	}
	return 0
}

func (x *PerformanceDetail) GetPerformanceAmount() float64 {
	if x != nil {
		return x.PerformanceAmount
	}
	return 0
}

func (x *PerformanceDetail) GetPerformanceRate() float64 {
	if x != nil {
		return x.PerformanceRate
	}
	return 0
}

func (x *PerformanceDetail) GetPerformanceDate() string {
	if x != nil {
		return x.PerformanceDate
	}
	return ""
}

// 医生业绩信息
type DoctorPerformanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoctorId           int64                `protobuf:"varint,1,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id,omitempty"`                              // 医生ID
	DoctorName         string               `protobuf:"bytes,2,opt,name=doctor_name,json=doctorName,proto3" json:"doctor_name,omitempty"`                         // 医生姓名
	DeptName           string               `protobuf:"bytes,3,opt,name=dept_name,json=deptName,proto3" json:"dept_name,omitempty"`                               // 科室名称
	TotalPerformance   float64              `protobuf:"fixed64,4,opt,name=total_performance,json=totalPerformance,proto3" json:"total_performance,omitempty"`     // 总业绩
	PrescriptionCount  int64                `protobuf:"varint,5,opt,name=prescription_count,json=prescriptionCount,proto3" json:"prescription_count,omitempty"`   // 处方数量
	PaymentCount       int64                `protobuf:"varint,6,opt,name=payment_count,json=paymentCount,proto3" json:"payment_count,omitempty"`                  // 缴费次数
	PerformanceDetails []*PerformanceDetail `protobuf:"bytes,7,rep,name=performance_details,json=performanceDetails,proto3" json:"performance_details,omitempty"` // 业绩明细
}

func (x *DoctorPerformanceInfo) Reset() {
	*x = DoctorPerformanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoctorPerformanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoctorPerformanceInfo) ProtoMessage() {}

func (x *DoctorPerformanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoctorPerformanceInfo.ProtoReflect.Descriptor instead.
func (*DoctorPerformanceInfo) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{31}
}

func (x *DoctorPerformanceInfo) GetDoctorId() int64 {
	if x != nil {
		return x.DoctorId
	}
	return 0
}

func (x *DoctorPerformanceInfo) GetDoctorName() string {
	if x != nil {
		return x.DoctorName
	}
	return ""
}

func (x *DoctorPerformanceInfo) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *DoctorPerformanceInfo) GetTotalPerformance() float64 {
	if x != nil {
		return x.TotalPerformance
	}
	return 0
}

func (x *DoctorPerformanceInfo) GetPrescriptionCount() int64 {
	if x != nil {
		return x.PrescriptionCount
	}
	return 0
}

func (x *DoctorPerformanceInfo) GetPaymentCount() int64 {
	if x != nil {
		return x.PaymentCount
	}
	return 0
}

func (x *DoctorPerformanceInfo) GetPerformanceDetails() []*PerformanceDetail {
	if x != nil {
		return x.PerformanceDetails
	}
	return nil
}

// 获取医生业绩响应
type GetDoctorPerformanceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        int64                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message     string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Performance *DoctorPerformanceInfo `protobuf:"bytes,3,opt,name=performance,proto3" json:"performance,omitempty"` // 业绩信息
}

func (x *GetDoctorPerformanceResp) Reset() {
	*x = GetDoctorPerformanceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doctor_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDoctorPerformanceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDoctorPerformanceResp) ProtoMessage() {}

func (x *GetDoctorPerformanceResp) ProtoReflect() protoreflect.Message {
	mi := &file_doctor_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDoctorPerformanceResp.ProtoReflect.Descriptor instead.
func (*GetDoctorPerformanceResp) Descriptor() ([]byte, []int) {
	return file_doctor_proto_rawDescGZIP(), []int{32}
}

func (x *GetDoctorPerformanceResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDoctorPerformanceResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetDoctorPerformanceResp) GetPerformance() *DoctorPerformanceInfo {
	if x != nil {
		return x.Performance
	}
	return nil
}

var File_doctor_proto protoreflect.FileDescriptor

var file_doctor_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xa1, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x13, 0x0a, 0x05, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x10, 0x50,
	0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x5b, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x49, 0x64, 0x22,
	0x93, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x62, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x60, 0x0a, 0x16, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50,
	0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x8f, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfb, 0x02, 0x0a, 0x10, 0x50, 0x72,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13,
	0x0a, 0x05, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x61, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x2f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd8, 0x01, 0x0a,
	0x12, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x73, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x78, 0x0a, 0x13, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x73, 0x22, 0x96, 0x05, 0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x73, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x6e, 0x67, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xf5, 0x01, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x3a, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x73, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d,
	0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xce, 0x03,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x69, 0x6f, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x65, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x73, 0x65, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x69, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x69, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x5a,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x68, 0x49, 0x64, 0x22, 0x93, 0x02, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x73,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xe6, 0x03, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x70, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x69, 0x6f, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x73, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x70,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x89, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x2e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x13, 0x0a, 0x05, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x68, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x22, 0x2b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd8, 0x01,
	0x0a, 0x0b, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2f, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x65, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x77, 0x65, 0x65, 0x6b, 0x45, 0x6e, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x22, 0x86, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x70, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x22, 0xfb, 0x01, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x13,
	0x0a, 0x05, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22,
	0xbf, 0x02, 0x0a, 0x15, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70,
	0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x12, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0x89, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0b,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x6f, 0x63, 0x74, 0x6f,
	0x72, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x32, 0xe9, 0x08,
	0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x53, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x64, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x64, 0x6f, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1e, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x5c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x2e, 0x64, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x64,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4a, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x1a, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1b, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x64,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x1d, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x1e, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x50, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x53, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f,
	0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x20, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x4d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x5c, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x65, 0x65, 0x6b,
	0x6c, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x2e, 0x64, 0x6f, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c,
	0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x64, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x65, 0x65,
	0x6b, 0x6c, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x64,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_doctor_proto_rawDescOnce sync.Once
	file_doctor_proto_rawDescData = file_doctor_proto_rawDesc
)

func file_doctor_proto_rawDescGZIP() []byte {
	file_doctor_proto_rawDescOnce.Do(func() {
		file_doctor_proto_rawDescData = protoimpl.X.CompressGZIP(file_doctor_proto_rawDescData)
	})
	return file_doctor_proto_rawDescData
}

var file_doctor_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_doctor_proto_goTypes = []any{
	(*CreatePrescriptionReq)(nil),     // 0: doctor.CreatePrescriptionReq
	(*PrescriptionItem)(nil),          // 1: doctor.PrescriptionItem
	(*CreatePrescriptionResp)(nil),    // 2: doctor.CreatePrescriptionResp
	(*ReviewPrescriptionReq)(nil),     // 3: doctor.ReviewPrescriptionReq
	(*ReviewPrescriptionResp)(nil),    // 4: doctor.ReviewPrescriptionResp
	(*GetPrescriptionListReq)(nil),    // 5: doctor.GetPrescriptionListReq
	(*PrescriptionInfo)(nil),          // 6: doctor.PrescriptionInfo
	(*GetPrescriptionListResp)(nil),   // 7: doctor.GetPrescriptionListResp
	(*GetPrescriptionDetailReq)(nil),  // 8: doctor.GetPrescriptionDetailReq
	(*GetPrescriptionDetailResp)(nil), // 9: doctor.GetPrescriptionDetailResp
	(*SelectMedicinesReq)(nil),        // 10: doctor.SelectMedicinesReq
	(*SelectMedicinesResp)(nil),       // 11: doctor.SelectMedicinesResp
	(*MedicinesInfo)(nil),             // 12: doctor.MedicinesInfo
	(*GetMedicinesListReq)(nil),       // 13: doctor.GetMedicinesListReq
	(*GetMedicinesListResp)(nil),      // 14: doctor.GetMedicinesListResp
	(*GetMedicinesDetailReq)(nil),     // 15: doctor.GetMedicinesDetailReq
	(*GetMedicinesDetailResp)(nil),    // 16: doctor.GetMedicinesDetailResp
	(*CreateCareHistoryReq)(nil),      // 17: doctor.CreateCareHistoryReq
	(*CreateCareHistoryResp)(nil),     // 18: doctor.CreateCareHistoryResp
	(*GetCareHistoryListReq)(nil),     // 19: doctor.GetCareHistoryListReq
	(*CareHistoryInfo)(nil),           // 20: doctor.CareHistoryInfo
	(*GetCareHistoryListResp)(nil),    // 21: doctor.GetCareHistoryListResp
	(*GetCareHistoryDetailReq)(nil),   // 22: doctor.GetCareHistoryDetailReq
	(*GetCareHistoryDetailResp)(nil),  // 23: doctor.GetCareHistoryDetailResp
	(*GetWeeklyRankingReq)(nil),       // 24: doctor.GetWeeklyRankingReq
	(*RankingInfo)(nil),               // 25: doctor.RankingInfo
	(*GetWeeklyRankingResp)(nil),      // 26: doctor.GetWeeklyRankingResp
	(*GenerateWeeklyRankingReq)(nil),  // 27: doctor.GenerateWeeklyRankingReq
	(*GenerateWeeklyRankingResp)(nil), // 28: doctor.GenerateWeeklyRankingResp
	(*GetDoctorPerformanceReq)(nil),   // 29: doctor.GetDoctorPerformanceReq
	(*PerformanceDetail)(nil),         // 30: doctor.PerformanceDetail
	(*DoctorPerformanceInfo)(nil),     // 31: doctor.DoctorPerformanceInfo
	(*GetDoctorPerformanceResp)(nil),  // 32: doctor.GetDoctorPerformanceResp
}
var file_doctor_proto_depIdxs = []int32{
	1,  // 0: doctor.CreatePrescriptionReq.items:type_name -> doctor.PrescriptionItem
	1,  // 1: doctor.PrescriptionInfo.items:type_name -> doctor.PrescriptionItem
	6,  // 2: doctor.GetPrescriptionListResp.list:type_name -> doctor.PrescriptionInfo
	6,  // 3: doctor.GetPrescriptionDetailResp.detail:type_name -> doctor.PrescriptionInfo
	12, // 4: doctor.SelectMedicinesResp.medicines:type_name -> doctor.MedicinesInfo
	12, // 5: doctor.GetMedicinesListResp.list:type_name -> doctor.MedicinesInfo
	12, // 6: doctor.GetMedicinesDetailResp.detail:type_name -> doctor.MedicinesInfo
	20, // 7: doctor.GetCareHistoryListResp.list:type_name -> doctor.CareHistoryInfo
	20, // 8: doctor.GetCareHistoryDetailResp.detail:type_name -> doctor.CareHistoryInfo
	25, // 9: doctor.GetWeeklyRankingResp.rankings:type_name -> doctor.RankingInfo
	30, // 10: doctor.DoctorPerformanceInfo.performance_details:type_name -> doctor.PerformanceDetail
	31, // 11: doctor.GetDoctorPerformanceResp.performance:type_name -> doctor.DoctorPerformanceInfo
	0,  // 12: doctor.DoctorService.CreatePrescription:input_type -> doctor.CreatePrescriptionReq
	3,  // 13: doctor.DoctorService.ReviewPrescription:input_type -> doctor.ReviewPrescriptionReq
	5,  // 14: doctor.DoctorService.GetPrescriptionList:input_type -> doctor.GetPrescriptionListReq
	8,  // 15: doctor.DoctorService.GetPrescriptionDetail:input_type -> doctor.GetPrescriptionDetailReq
	10, // 16: doctor.DoctorService.SelectMedicines:input_type -> doctor.SelectMedicinesReq
	13, // 17: doctor.DoctorService.GetMedicinesList:input_type -> doctor.GetMedicinesListReq
	15, // 18: doctor.DoctorService.GetMedicinesDetail:input_type -> doctor.GetMedicinesDetailReq
	17, // 19: doctor.DoctorService.CreateCareHistory:input_type -> doctor.CreateCareHistoryReq
	19, // 20: doctor.DoctorService.GetCareHistoryList:input_type -> doctor.GetCareHistoryListReq
	22, // 21: doctor.DoctorService.GetCareHistoryDetail:input_type -> doctor.GetCareHistoryDetailReq
	24, // 22: doctor.DoctorService.GetWeeklyRanking:input_type -> doctor.GetWeeklyRankingReq
	27, // 23: doctor.DoctorService.GenerateWeeklyRanking:input_type -> doctor.GenerateWeeklyRankingReq
	29, // 24: doctor.DoctorService.GetDoctorPerformance:input_type -> doctor.GetDoctorPerformanceReq
	2,  // 25: doctor.DoctorService.CreatePrescription:output_type -> doctor.CreatePrescriptionResp
	4,  // 26: doctor.DoctorService.ReviewPrescription:output_type -> doctor.ReviewPrescriptionResp
	7,  // 27: doctor.DoctorService.GetPrescriptionList:output_type -> doctor.GetPrescriptionListResp
	9,  // 28: doctor.DoctorService.GetPrescriptionDetail:output_type -> doctor.GetPrescriptionDetailResp
	11, // 29: doctor.DoctorService.SelectMedicines:output_type -> doctor.SelectMedicinesResp
	14, // 30: doctor.DoctorService.GetMedicinesList:output_type -> doctor.GetMedicinesListResp
	16, // 31: doctor.DoctorService.GetMedicinesDetail:output_type -> doctor.GetMedicinesDetailResp
	18, // 32: doctor.DoctorService.CreateCareHistory:output_type -> doctor.CreateCareHistoryResp
	21, // 33: doctor.DoctorService.GetCareHistoryList:output_type -> doctor.GetCareHistoryListResp
	23, // 34: doctor.DoctorService.GetCareHistoryDetail:output_type -> doctor.GetCareHistoryDetailResp
	26, // 35: doctor.DoctorService.GetWeeklyRanking:output_type -> doctor.GetWeeklyRankingResp
	28, // 36: doctor.DoctorService.GenerateWeeklyRanking:output_type -> doctor.GenerateWeeklyRankingResp
	32, // 37: doctor.DoctorService.GetDoctorPerformance:output_type -> doctor.GetDoctorPerformanceResp
	25, // [25:38] is the sub-list for method output_type
	12, // [12:25] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_doctor_proto_init() }
func file_doctor_proto_init() {
	if File_doctor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_doctor_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePrescriptionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PrescriptionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePrescriptionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ReviewPrescriptionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ReviewPrescriptionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetPrescriptionListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PrescriptionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetPrescriptionListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetPrescriptionDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetPrescriptionDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SelectMedicinesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SelectMedicinesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MedicinesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetMedicinesListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GetMedicinesListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GetMedicinesDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*GetMedicinesDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CreateCareHistoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CreateCareHistoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*GetCareHistoryListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CareHistoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*GetCareHistoryListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*GetCareHistoryDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*GetCareHistoryDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*GetWeeklyRankingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*RankingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GetWeeklyRankingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*GenerateWeeklyRankingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GenerateWeeklyRankingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*GetDoctorPerformanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*PerformanceDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*DoctorPerformanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doctor_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*GetDoctorPerformanceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_doctor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_doctor_proto_goTypes,
		DependencyIndexes: file_doctor_proto_depIdxs,
		MessageInfos:      file_doctor_proto_msgTypes,
	}.Build()
	File_doctor_proto = out.File
	file_doctor_proto_rawDesc = nil
	file_doctor_proto_goTypes = nil
	file_doctor_proto_depIdxs = nil
}
