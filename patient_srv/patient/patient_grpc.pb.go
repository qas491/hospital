// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: patient.proto

package patient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MedicalService_ListDepartments_FullMethodName   = "/patient.MedicalService/ListDepartments"
	MedicalService_ListDoctors_FullMethodName       = "/patient.MedicalService/ListDoctors"
	MedicalService_ListTimeSlots_FullMethodName     = "/patient.MedicalService/ListTimeSlots"
	MedicalService_MakeAppointment_FullMethodName   = "/patient.MedicalService/MakeAppointment"
	MedicalService_GetAppointment_FullMethodName    = "/patient.MedicalService/GetAppointment"
	MedicalService_CancelAppointment_FullMethodName = "/patient.MedicalService/CancelAppointment"
)

// MedicalServiceClient is the client API for MedicalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ========== 服务定义 ===========
type MedicalServiceClient interface {
	ListDepartments(ctx context.Context, in *ListDepartmentsRequest, opts ...grpc.CallOption) (*ListDepartmentsResponse, error)
	ListDoctors(ctx context.Context, in *ListDoctorsRequest, opts ...grpc.CallOption) (*ListDoctorsResponse, error)
	ListTimeSlots(ctx context.Context, in *ListTimeSlotsRequest, opts ...grpc.CallOption) (*ListTimeSlotsResponse, error)
	MakeAppointment(ctx context.Context, in *MakeAppointmentRequest, opts ...grpc.CallOption) (*MakeAppointmentResponse, error)
	GetAppointment(ctx context.Context, in *GetAppointmentRequest, opts ...grpc.CallOption) (*GetAppointmentResponse, error)
	CancelAppointment(ctx context.Context, in *CancelAppointmentRequest, opts ...grpc.CallOption) (*CancelAppointmentResponse, error)
}

type medicalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMedicalServiceClient(cc grpc.ClientConnInterface) MedicalServiceClient {
	return &medicalServiceClient{cc}
}

func (c *medicalServiceClient) ListDepartments(ctx context.Context, in *ListDepartmentsRequest, opts ...grpc.CallOption) (*ListDepartmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDepartmentsResponse)
	err := c.cc.Invoke(ctx, MedicalService_ListDepartments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalServiceClient) ListDoctors(ctx context.Context, in *ListDoctorsRequest, opts ...grpc.CallOption) (*ListDoctorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDoctorsResponse)
	err := c.cc.Invoke(ctx, MedicalService_ListDoctors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalServiceClient) ListTimeSlots(ctx context.Context, in *ListTimeSlotsRequest, opts ...grpc.CallOption) (*ListTimeSlotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTimeSlotsResponse)
	err := c.cc.Invoke(ctx, MedicalService_ListTimeSlots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalServiceClient) MakeAppointment(ctx context.Context, in *MakeAppointmentRequest, opts ...grpc.CallOption) (*MakeAppointmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeAppointmentResponse)
	err := c.cc.Invoke(ctx, MedicalService_MakeAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalServiceClient) GetAppointment(ctx context.Context, in *GetAppointmentRequest, opts ...grpc.CallOption) (*GetAppointmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppointmentResponse)
	err := c.cc.Invoke(ctx, MedicalService_GetAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalServiceClient) CancelAppointment(ctx context.Context, in *CancelAppointmentRequest, opts ...grpc.CallOption) (*CancelAppointmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelAppointmentResponse)
	err := c.cc.Invoke(ctx, MedicalService_CancelAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedicalServiceServer is the server API for MedicalService service.
// All implementations must embed UnimplementedMedicalServiceServer
// for forward compatibility.
//
// ========== 服务定义 ===========
type MedicalServiceServer interface {
	ListDepartments(context.Context, *ListDepartmentsRequest) (*ListDepartmentsResponse, error)
	ListDoctors(context.Context, *ListDoctorsRequest) (*ListDoctorsResponse, error)
	ListTimeSlots(context.Context, *ListTimeSlotsRequest) (*ListTimeSlotsResponse, error)
	MakeAppointment(context.Context, *MakeAppointmentRequest) (*MakeAppointmentResponse, error)
	GetAppointment(context.Context, *GetAppointmentRequest) (*GetAppointmentResponse, error)
	CancelAppointment(context.Context, *CancelAppointmentRequest) (*CancelAppointmentResponse, error)
	mustEmbedUnimplementedMedicalServiceServer()
}

// UnimplementedMedicalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMedicalServiceServer struct{}

func (UnimplementedMedicalServiceServer) ListDepartments(context.Context, *ListDepartmentsRequest) (*ListDepartmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepartments not implemented")
}
func (UnimplementedMedicalServiceServer) ListDoctors(context.Context, *ListDoctorsRequest) (*ListDoctorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDoctors not implemented")
}
func (UnimplementedMedicalServiceServer) ListTimeSlots(context.Context, *ListTimeSlotsRequest) (*ListTimeSlotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTimeSlots not implemented")
}
func (UnimplementedMedicalServiceServer) MakeAppointment(context.Context, *MakeAppointmentRequest) (*MakeAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeAppointment not implemented")
}
func (UnimplementedMedicalServiceServer) GetAppointment(context.Context, *GetAppointmentRequest) (*GetAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointment not implemented")
}
func (UnimplementedMedicalServiceServer) CancelAppointment(context.Context, *CancelAppointmentRequest) (*CancelAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAppointment not implemented")
}
func (UnimplementedMedicalServiceServer) mustEmbedUnimplementedMedicalServiceServer() {}
func (UnimplementedMedicalServiceServer) testEmbeddedByValue()                        {}

// UnsafeMedicalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedicalServiceServer will
// result in compilation errors.
type UnsafeMedicalServiceServer interface {
	mustEmbedUnimplementedMedicalServiceServer()
}

func RegisterMedicalServiceServer(s grpc.ServiceRegistrar, srv MedicalServiceServer) {
	// If the following call pancis, it indicates UnimplementedMedicalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MedicalService_ServiceDesc, srv)
}

func _MedicalService_ListDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepartmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalServiceServer).ListDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalService_ListDepartments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalServiceServer).ListDepartments(ctx, req.(*ListDepartmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalService_ListDoctors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDoctorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalServiceServer).ListDoctors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalService_ListDoctors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalServiceServer).ListDoctors(ctx, req.(*ListDoctorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalService_ListTimeSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTimeSlotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalServiceServer).ListTimeSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalService_ListTimeSlots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalServiceServer).ListTimeSlots(ctx, req.(*ListTimeSlotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalService_MakeAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalServiceServer).MakeAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalService_MakeAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalServiceServer).MakeAppointment(ctx, req.(*MakeAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalService_GetAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalServiceServer).GetAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalService_GetAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalServiceServer).GetAppointment(ctx, req.(*GetAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalService_CancelAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalServiceServer).CancelAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalService_CancelAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalServiceServer).CancelAppointment(ctx, req.(*CancelAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MedicalService_ServiceDesc is the grpc.ServiceDesc for MedicalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedicalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "patient.MedicalService",
	HandlerType: (*MedicalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDepartments",
			Handler:    _MedicalService_ListDepartments_Handler,
		},
		{
			MethodName: "ListDoctors",
			Handler:    _MedicalService_ListDoctors_Handler,
		},
		{
			MethodName: "ListTimeSlots",
			Handler:    _MedicalService_ListTimeSlots_Handler,
		},
		{
			MethodName: "MakeAppointment",
			Handler:    _MedicalService_MakeAppointment_Handler,
		},
		{
			MethodName: "GetAppointment",
			Handler:    _MedicalService_GetAppointment_Handler,
		},
		{
			MethodName: "CancelAppointment",
			Handler:    _MedicalService_CancelAppointment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "patient.proto",
}
